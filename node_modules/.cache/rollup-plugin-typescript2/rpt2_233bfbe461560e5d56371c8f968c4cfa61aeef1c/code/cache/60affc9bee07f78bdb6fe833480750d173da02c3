{"code":"import React, { useEffect, useState } from \"react\";\r\nimport Visibility from \"./Visibility\";\r\nimport SelectBox from \"./SelectBox\";\r\nimport { buttonWordRegex, getProperWord, getPropValues, hasVisibilityRegex, passedValidation, removeUnnecessaryData, selectWordRegex, validInputTypwWordRegex, } from \"./utils\";\r\nexport default function BootstrapedForm({ fields, preloadData, payload, }) {\r\n    const [state, setState] = useState([]);\r\n    const [form, setForm] = useState({});\r\n    const [errors, setErrors] = useState({});\r\n    const [getErrorKeyNamesForReference, setStoreErrorKeyNamesForReference] = useState({});\r\n    const [disableButton, setDisableButton] = useState(false);\r\n    const getFieldsKeys = Object.keys(fields);\r\n    let getFieldsValues = Object.values(fields);\r\n    useEffect(() => {\r\n        if (typeof fields != \"object\")\r\n            return;\r\n        const removeInvalidInputTypes = getFieldsValues.filter((data) => validInputTypwWordRegex.test(data) === true);\r\n        setState(removeInvalidInputTypes);\r\n    }, [fields]);\r\n    // for adding preloaded data\r\n    useEffect(() => {\r\n        if (!preloadData)\r\n            return;\r\n        if (typeof form !== \"object\")\r\n            return;\r\n        for (let x = 0; x < Object.keys(preloadData).length; x++) {\r\n            let dataKey = Object.keys(preloadData);\r\n            let dataValue = Object.values(preloadData);\r\n            setForm((prev) => (Object.assign(Object.assign({}, prev), { [dataKey[x]]: dataValue[x] })));\r\n        }\r\n    }, [preloadData]);\r\n    const shouldAddBtn = buttonWordRegex.test(Object.values(fields).join(\"\"));\r\n    const getButtonIndexOfKey = Object.values(fields).findIndex((data) => buttonWordRegex.test(data));\r\n    const getButtonName = getFieldsKeys[getButtonIndexOfKey];\r\n    const onChange = (e) => {\r\n        let name = e.target.name;\r\n        let value = e.target.value;\r\n        let type = e.target.type;\r\n        setForm((prev) => (Object.assign(Object.assign({}, prev), { \r\n            //because checkbox value returns empty string, replace with true\r\n            [name]: type !== \"checkbox\"\r\n                ? value\r\n                : type === \"checkbox\" && !value\r\n                    ? true\r\n                    : value })));\r\n    };\r\n    useEffect(() => {\r\n        if (!fields)\r\n            return;\r\n        Object.keys(fields).map((data) => {\r\n            //duplicate error message key, to reset errors to empty string\r\n            setStoreErrorKeyNamesForReference({ [`${data}-error-message`]: \"\" });\r\n            setErrors((prev) => (Object.assign(Object.assign({}, prev), { [`${data}-error-message`]: \"\" })));\r\n        });\r\n    }, [fields]);\r\n    const handleButton = (e) => {\r\n        e.preventDefault();\r\n        if (!passedValidation(fields, form, setErrors))\r\n            return;\r\n        setErrors(getErrorKeyNamesForReference);\r\n        setDisableButton(true);\r\n        if (!payload)\r\n            return;\r\n        payload(removeUnnecessaryData(form), isAccepted, notAccepted);\r\n        setDisableButton(true);\r\n    };\r\n    const emptyForm = () => {\r\n        setForm({});\r\n    };\r\n    const isAccepted = () => {\r\n        setDisableButton(false);\r\n        emptyForm();\r\n    };\r\n    const notAccepted = () => {\r\n        setDisableButton(false);\r\n    };\r\n    // change password visibility in state\r\n    const handleShowPassword = (name, showPassword) => {\r\n        if (getFieldsKeys.includes(name)) {\r\n            let passwordlocation = getFieldsKeys.findIndex((data) => data === name);\r\n            if (!passwordlocation)\r\n                return;\r\n            let r = getFieldsValues === null || getFieldsValues === void 0 ? void 0 : getFieldsValues[passwordlocation];\r\n            let replace = r.replace(showPassword ? \"password\" : \"text\", showPassword ? \"text\" : \"password\");\r\n            setState((prev) => prev.map((data, index) => {\r\n                if (index === passwordlocation) {\r\n                    return replace;\r\n                }\r\n                else {\r\n                    return data;\r\n                }\r\n            }));\r\n        }\r\n    };\r\n    return (React.createElement(\"form\", { className: \"_bootstraped-form-container\" }, state === null || state === void 0 ? void 0 :\r\n        state.map((data, index) => {\r\n            const { type, getFormLabel: name, className, required, placeholder, } = getPropValues(data, index, getFieldsKeys) || {};\r\n            let props = {\r\n                className: `_${className}`,\r\n                type,\r\n                required,\r\n                placeholder,\r\n                onChange,\r\n                value: form[name] || \"\",\r\n                name,\r\n            };\r\n            const visibilityProps = {\r\n                name,\r\n                props,\r\n                handleShowPassword,\r\n            };\r\n            return (React.createElement(\"div\", { key: index, className: \"_form_inner_container\" },\r\n                React.createElement(\"label\", { className: `_form-label` }, getProperWord(name)),\r\n                (selectWordRegex === null || selectWordRegex === void 0 ? void 0 : selectWordRegex.test(String(data))) ? (React.createElement(React.Fragment, null,\r\n                    React.createElement(SelectBox, { props: props, name: name, data: data }),\r\n                    React.createElement(\"p\", { className: \"_error-message\" }, errors[`${name}-error-message`]))) : (React.createElement(React.Fragment, null,\r\n                    (hasVisibilityRegex === null || hasVisibilityRegex === void 0 ? void 0 : hasVisibilityRegex.test(String(data))) ? (React.createElement(Visibility, Object.assign({}, visibilityProps))) : (React.createElement(\"input\", Object.assign({}, props))),\r\n                    React.createElement(\"p\", { className: \"_error-message\" }, errors[`${name}-error-message`])))));\r\n        }),\r\n        shouldAddBtn && (React.createElement(\"button\", { className: `_form-button`, onClick: handleButton, disabled: disableButton }, !disableButton ? getProperWord(getButtonName) : \"Please wait...\"))));\r\n}\r\n","references":["/Users/mac/Desktop/bootstrapped-form/node_modules/@types/react/index.d.ts","/Users/mac/Desktop/bootstrapped-form/lib/Visibility.tsx","/Users/mac/Desktop/bootstrapped-form/lib/SelectBox.tsx","/Users/mac/Desktop/bootstrapped-form/lib/utils.ts"],"dts":{"name":"/Users/mac/Desktop/bootstrapped-form/node_modules/.cache/rollup-plugin-typescript2/placeholder/lib/index.d.ts","writeByteOrderMark":false,"text":"/// <reference types=\"react\" />\r\ntype Props = {\r\n    fields: Object;\r\n    preloadData?: Object;\r\n    payload?: (res: Function, success: Function, error: Function) => any;\r\n};\r\nexport default function BootstrapedForm({ fields, preloadData, payload, }: Props): JSX.Element;\r\nexport {};\r\n"}}
