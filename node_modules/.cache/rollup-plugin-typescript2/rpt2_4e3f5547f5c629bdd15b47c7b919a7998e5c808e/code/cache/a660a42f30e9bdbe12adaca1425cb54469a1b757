{"code":"export const buttonWordRegex = /button|btn/i;\r\nexport const validInputTypwWordRegex = /text|textarea|number|select|email|password|checkbox/i;\r\nexport const selectWordRegex = /select/i;\r\nexport const enterWordRegex = /Enter|your/i;\r\nexport const requiredWordRegex = /required/i;\r\nexport const hasVisibilityRegex = /visibility/i;\r\nexport const arrayRegex = /\\[.*?.*?\\]/gm;\r\nexport const validEmailCheck = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/;\r\nexport const strongPasswordCheck = /^(?=(.*[a-z]){2,})(?=(.*[A-Z]){1,})(?=(.*[0-9]){1,})(?=(.*[!@#$%^&*()\\-__+.]){1,}).{8,}$/;\r\nexport const getProperWord = (arrayOfChar) => {\r\n    let charArray = arrayOfChar === null || arrayOfChar === void 0 ? void 0 : arrayOfChar.split(\"\");\r\n    if (!charArray)\r\n        return arrayOfChar;\r\n    let formatChars = charArray.map((data, i) => data === (data === null || data === void 0 ? void 0 : data.toUpperCase())\r\n        ? ` ${data === null || data === void 0 ? void 0 : data.toUpperCase()}`\r\n        : i === 0\r\n            ? data === null || data === void 0 ? void 0 : data.toUpperCase()\r\n            : data);\r\n    return formatChars.join(\"\");\r\n};\r\nexport const removeUnnecessaryData = (data) => {\r\n    let objectData = data;\r\n    objectData === null || objectData === void 0 ? true : delete objectData.confirmPassword;\r\n    return objectData;\r\n};\r\n// for select input type,get the options\r\nexport const getSelectOptions = (data) => {\r\n    let r = data.split(\"|\").find((data) => arrayRegex.test(data));\r\n    try {\r\n        let jsonStr = String(r).replace(/(\\w+:)|(\\w+ :)/g, function (matchedStr) {\r\n            return '\"' + matchedStr.substring(0, matchedStr.length - 1) + '\":';\r\n        });\r\n        return JSON.parse(jsonStr);\r\n    }\r\n    catch (_a) {\r\n        return [];\r\n    }\r\n};\r\nexport const getPropValues = (data, index, getFieldsKeys) => {\r\n    var _a;\r\n    const type = (_a = data.split(\"|\")) === null || _a === void 0 ? void 0 : _a[0];\r\n    const getFormLabel = getFieldsKeys === null || getFieldsKeys === void 0 ? void 0 : getFieldsKeys[index];\r\n    const className = `${getFormLabel}-class`;\r\n    const required = requiredWordRegex.test(String(data)) === false ? false : true;\r\n    const placeholder = enterWordRegex.test(String(data)) === false\r\n        ? \"\"\r\n        : data.split(\"|\").find((data) => enterWordRegex.test(data));\r\n    return {\r\n        type,\r\n        getFormLabel,\r\n        className,\r\n        required,\r\n        placeholder,\r\n    };\r\n};\r\nexport const passedValidation = (fields, form, setErrors) => {\r\n    let r = Object.values(fields).map((data, index) => {\r\n        let hasValidation = requiredWordRegex.test(data);\r\n        let name = Object.keys(fields)[index];\r\n        let hasValidInput = form === null || form === void 0 ? void 0 : form[name];\r\n        // strong password check\r\n        if (name === \"password\") {\r\n            if (strongPasswordCheck.test(form === null || form === void 0 ? void 0 : form[\"password\"]) === false) {\r\n                setErrors((prev) => (Object.assign(Object.assign({}, prev), { [`${name}-error-message`]: `Must include at least one capital letter, number & special character ` })));\r\n                return false;\r\n            }\r\n            else {\r\n                setErrors((prev) => (Object.assign(Object.assign({}, prev), { [`${name}-error-message`]: `` })));\r\n            }\r\n        }\r\n        // strong email validation\r\n        if (name === \"email\") {\r\n            if (validEmailCheck.test(form === null || form === void 0 ? void 0 : form[\"email\"]) === false) {\r\n                setErrors((prev) => (Object.assign(Object.assign({}, prev), { [`${name}-error-message`]: `Not a valid email` })));\r\n                return false;\r\n            }\r\n            else {\r\n                setErrors((prev) => (Object.assign(Object.assign({}, prev), { [`${name}-error-message`]: `` })));\r\n            }\r\n        }\r\n        // check password match if there's a password & confirm password field\r\n        if (name === \"confirmPassword\" && (form === null || form === void 0 ? void 0 : form[\"password\"])) {\r\n            if (form[name] !== (form === null || form === void 0 ? void 0 : form[\"password\"])) {\r\n                setErrors((prev) => (Object.assign(Object.assign({}, prev), { [`${name}-error-message`]: `password doesn't match` })));\r\n                return false;\r\n            }\r\n            else {\r\n                setErrors((prev) => (Object.assign(Object.assign({}, prev), { [`${name}-error-message`]: `` })));\r\n            }\r\n        }\r\n        //if user doesnt want validation checked\r\n        if (!hasValidation)\r\n            return true;\r\n        //if user wants validation and has entered valid input\r\n        if (hasValidation && hasValidInput)\r\n            return true;\r\n        setErrors((prev) => (Object.assign(Object.assign({}, prev), { [`${name}-error-message`]: `${getProperWord(name)} cannot be empty` })));\r\n        return false;\r\n    });\r\n    //if there're no single errors in the array\r\n    if (r.includes(false)) {\r\n        return false;\r\n    }\r\n    else {\r\n        return true;\r\n    }\r\n};\r\n","references":[],"dts":{"name":"/Users/mac/Desktop/bootstrapped-form/node_modules/.cache/rollup-plugin-typescript2/placeholder/lib/utils.d.ts","writeByteOrderMark":false,"text":"export declare const buttonWordRegex: RegExp;\r\nexport declare const validInputTypwWordRegex: RegExp;\r\nexport declare const selectWordRegex: RegExp;\r\nexport declare const enterWordRegex: RegExp;\r\nexport declare const requiredWordRegex: RegExp;\r\nexport declare const hasVisibilityRegex: RegExp;\r\nexport declare const arrayRegex: RegExp;\r\nexport declare const validEmailCheck: RegExp;\r\nexport declare const strongPasswordCheck: RegExp;\r\nexport declare const getProperWord: (arrayOfChar: string) => string;\r\nexport declare const removeUnnecessaryData: (data: any) => any;\r\nexport declare const getSelectOptions: (data: String) => any;\r\nexport declare const getPropValues: (data: String, index: number, getFieldsKeys: any) => {\r\n    type: string;\r\n    getFormLabel: any;\r\n    className: string;\r\n    required: boolean;\r\n    placeholder: string | undefined;\r\n};\r\nexport declare const passedValidation: (fields: object, form: any, setErrors: any) => boolean;\r\n"}}
